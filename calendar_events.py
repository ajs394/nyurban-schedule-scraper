import datetime
import os.path
import pickle
from datetime import timedelta

from dateutil import parser
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# If modifying these scopes, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/calendar']
google_datetime_format = '%Y-%m-%dT%H:%M:%S'
search_datetime_format = '%Y-%m-%dT%H:%M:%S.%fZ'

_service = None

class schedule_event:
    def __init__(self, date=None, time=None, address=None, teamId=None, teamName=None):
        self.date = date
        self.time = time
        self.address = address
        self.teamId = teamId
        self.teamName = teamName

def get_service():
    global _service
    if _service is None:
        creds = None
        # The file token.pickle stores the user's access and refresh tokens, and is
        # created automatically when the authorization flow completes for the first
        # time.
        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)
        # If there are no (valid) credentials available, let the user log in.
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    'nyurban-schedule-scraper/credentials.json', SCOPES)
                creds = flow.run_local_server()
            # Save the credentials for the next run
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)

        _service = build('calendar', 'v3', credentials=creds)
    return _service

def add_event(external_event: schedule_event, calendar_name: str):
    service = get_service()

    # Call the Calendar API
    now = datetime.datetime.utcnow().isoformat() + 'Z' # 'Z' indicates UTC time
    print('Getting calendar instance by name', calendar_name)

    if calendar_name != "primary":
        calendar = None
        for cal in service.calendarList().list().execute()["items"]:
            if cal["summary"] == calendar_name:
                calendar = cal
        calendar_name = calendar["id"]

    # create calendar event from event details
    start_datetime = parser.parse(external_event.date + " " + external_event.time + "PM")
    end_datetime = start_datetime + timedelta(hours=1)
    event = {
        'summary': 'Volleyball for Team ' + external_event.teamName,
        'location': external_event.address,
        'description': "Volleyball event generated by Alec's python script :)",
        'start': {
            'dateTime': start_datetime.strftime(google_datetime_format),
            'timeZone': 'America/New_York',
        },
        'end': {
            'dateTime': end_datetime.strftime(google_datetime_format),
            'timeZone': 'America/New_York',
        },
        'reminders': {
            'useDefault': True
        },
    }

    # get events for the day to check if event already exists, if same team and time delete old event
    events_result = service.events().list(calendarId=calendar_name, timeMin=start_datetime.strftime(search_datetime_format),
                                        maxResults=10, singleEvents=True,
                                        orderBy='startTime').execute()
    events = events_result.get('items', [])

    for e in events:
        if e['summary'] == event['summary'] and e['start']['dateTime'] == start_datetime.astimezone().isoformat():
            service.events().delete(calendarId=calendar_name, eventId=e['id']).execute()

    # upload new event
    event = service.events().insert(calendarId=calendar_name, body=event).execute()

    print("uploaded event ", event)
